// This program does the following:
// 1) Apply several methods to a bag (or set, list) of letters.
// This program required an interface called SetInterface which contained information about each method.
// SetInterface was downcasted to simpleSet.
// My contribution --> lines 33 - 168

public class SimpleSet<T> implements SetInterface<T>
{
    private ResizableArrayBag<T> aBag;

    /*-------------------------------------------*/
    /* The following 3 methods are done */

    /* Creates a set from a new, empty ResizableArrayBag. */
    public SimpleSet()
    {
        aBag = new ResizableArrayBag<T>();
    } // end default constructor

    public T[] toArray()
    {
        return aBag.toArray();
    } // end toArray

    public boolean isEmpty()
    {
        return aBag.isEmpty();
    } // end isEmpty

    /*-------------------------------------------*/
    /* Implement all methods below */

    public boolean add(T newEntry)
    {
        // implement this method!
        if (aBag.contains(newEntry)) { // check if the element is in the set first before trying to add it.
            return false; // element is already in the set; addition not successful.
        } else {
            aBag.add(newEntry); // element is now in the set.
            return true; // addition was successful.
        }
    } // end add

    public int size()
    {
        // implement this method!
        return aBag.getCurrentSize();
    } // end size

    public boolean contains(T anEntry)
    {
        // implement this method!
        if (aBag.contains(anEntry)) {
            return true; // element is in the set.
        } else {
            return false; // element is not in the set.
        }
    } // end contains

    public void clear()
    {
        // implement this method!
        aBag.clear();
    } // end clear

    public T remove()
    {
        // implement this method!
        return aBag.remove();
    } // end remove

    public boolean remove(T anEntry)
    {
        // implement this method!
        return aBag.remove(anEntry);
    } // end remove


    // for methods below, you will need to traverse set data [Note: ("traverse" means "loop through"; "iterate")]
    // use toArray() method to get an array of all data [Ex: "this.toArray()" and "anotherSet.toArray()"]
    //                                                          (first set)            (second set)

    public SetInterface<T> union(SetInterface<T> anotherSet)
    {
        // implement this method!
        SetInterface<T> newUnionSet = new SimpleSet<>(); // downcast SetInterface to SimpleSet.
        T[] arr = this.toArray(); // set 1.
        T[] arr2 = anotherSet.toArray(); // set 2.

        // for set 1.
        for (int i = 0; i < this.size(); i++) {
            newUnionSet.add(arr[i]); // put each element from set 1 into a third set.
        }

        // for set 2.
        for (int j = 0; j < anotherSet.size(); j++) {
            newUnionSet.add(arr2[j]); // put each element from set 2 into that same third set.
        }

        return newUnionSet; // third set; contains all elements from sets 1 and 2.
    } // end union

    public SetInterface<T> intersection(SetInterface<T> anotherSet)
    {
        // implement this method!
        SetInterface<T> newIntersectionSet = new SimpleSet<>(); // downcast SetInterface to SimpleSet.
        T[] arr = this.toArray(); // set 1.

        for (int i = 0; i < this.size(); i++) {
            if (anotherSet.contains(arr[i])) { // if set 2 shares any elements with set 1,
                newIntersectionSet.add(arr[i]); // put those shared elements in a third set.
            }
        }

        return newIntersectionSet; // third set; contains all shared elements between sets 1 and 2.
    } // end intersection

    public SetInterface<T> difference(SetInterface<T> anotherSet)
    {
        // implement this method!
        SetInterface<T> newDifferenceSet = new SimpleSet<>(); // downcast SetInterface to SimpleSet.
        T [] arr = this.toArray(); // set 1.

        for (int i = 0; i < this.size(); i++) {
            if (!(anotherSet.contains(arr[i]))) { // if set 2 does NOT share any elements with set 1,
                newDifferenceSet.add(arr[i]);     // put those unshared elements in a third set.
            }
        }
        return newDifferenceSet; // third set; contains all unshared elements between sets 1 and 2.
    } // end difference

    public boolean subset(SetInterface<T> anotherSet)
    {
        // implement this method!
        T[] arr = this.toArray(); // set 1.

        for (int i = 0; i < this.size(); i++) {
            if (!(anotherSet.contains(arr[i]))) { // if set 2 does NOT share any elements with set 1,
                return false;                     // then set 2 is NOT a subset of set 1.
            }
        }
        return true; // otherwise, set 2 is a subset of set 1.
    } // end subset


    // display set data in a string
    // example: for a set containing 4 data a, b, c, d
    //          return a string "{a, b, c, d}"
    public String toString()
    {
        // implement this method!
        String o = "{"; // o for open curly brace.
        String c = "}"; // c for close curly brace.
        T[] arr = this.toArray();

        for (int i = 0; i < this.size()-1; i++) {
            o = o + arr[i] + ","; // "{arr[0], arr[1], arr[2], ... , arr[i]" ** NO CLOSING BRACE ADDED YET.
        }

        if (this.size() > 0) {
            o = o + arr[size()-1] + c; // "{arr[0], arr[1], arr[2], ... , arr[i]}" ** CLOSING BRACE ADDED.
        } else if (this.size() == 0) { // specifically for the empty sets.
            o = o + c; // simply "{}"
        }
        return o; // since this variable kept getting re-assigned, it is now a set including "{" and "}".
    } // end toString

} // end SimpleSet
