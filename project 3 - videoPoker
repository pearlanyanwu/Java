package PJ3;
import java.util.*;

/*
 * Ref: http://en.wikipedia.org/wiki/Video_poker
 *      http://www.freeslots.com/poker.htm
 *
 *
 * Short Description and Poker rules:
 *
 * Video poker is also known as draw poker.
 * The dealer uses a 52-card deck, which is played fresh after each playerHand.
 * The player is dealt one five-card poker playerHand.
 * After the first draw, which is automatic, you may hold any of the cards and draw
 * again to replace the cards that you haven't chosen to hold.
 * Your cards are compared to a table of winning combinations.
 * The object is to get the best possible combination so that you earn the highest
 * payout on the bet you placed.
 *
 * Winning Combinations
 *
 * 1. Jacks or Better: a pair pays out only if the cards in the pair are Jacks,
 * 	Queens, Kings, or Aces. Lower pairs do not pay out.
 * 2. Two Pair: two sets of pairs of the same card denomination.
 * 3. Three of a Kind: three cards of the same denomination.
 * 4. Straight: five consecutive denomination cards of different suit.
 * 5. Flush: five non-consecutive denomination cards of the same suit.
 * 6. Full House: a set of three cards of the same denomination plus
 * 	a set of two cards of the same denomination.
 * 7. Four of a kind: four cards of the same denomination.
 * 8. Straight Flush: five consecutive denomination cards of the same suit.
 * 9. Royal Flush: five consecutive denomination cards of the same suit,
 * 	starting from 10 and ending with an ace
 *
 */


/* This is the video poker game class.
 * It uses OneDeck and Card objects to implement video poker game.
 * Please do not modify any data fields or defined methods
 * You may add new data fields and methods
 * Note: You must implement defined methods
 */



public class VideoPoker {

    // default constant values
    private static final int defaultBalance = 1000;
    private static final int numberCards = 5;

    // default constant payout value and playerHand types
    private static final int[] winningMultipliers = {1, 2, 3, 5, 6, 9, 25, 50, 250};
    private static final String[] winningHands = {
            "Royal Pair", "Two Pairs", "Three of a Kind", "Straight", "Flush",
            "Full House", "Four of a Kind", "Straight Flush", "Royal Flush"};

    // use one deck of cards
    private final OneDeck thisDeck;

    // holding current player 5-card hand, balance, bet
    private List<Card> playerHand;
    private int playerBalance;
    private int playerBet;

    /**
     * default constructor, set balance = defaultBalance
     */
    public VideoPoker() {
        this(defaultBalance);
    }

    /**
     * constructor, set given balance
     */
    public VideoPoker(int balance) {
        this.playerBalance = balance;
        thisDeck = new OneDeck();
    }

    /**
     * This display the payout table based on winningMultipliers and
     * winningHands arrays
     */
    private void showPayoutTable() {
        System.out.println("\n\n");
        System.out.println("Payout Table   	      Multiplier   ");
        System.out.println("=======================================");
        int size = winningMultipliers.length;
        for (int i = size - 1; i >= 0; i--) {
            System.out.println(winningHands[i] + "\t|\t" + winningMultipliers[i]);
        }
        System.out.println("\n\n");
    }

    /**
     * Check current playerHand using winningMultipliers and winningHands arrays
     * Must print yourHandType (default is "Sorry, you lost") at the end of function.
     * This can be checked by testCheckHands() and main() method.
     */
    private void checkHands() {
        // implement this method
        if (royalFlush()) {
            playerBalance = playerBalance + (winningMultipliers[8] * playerBet);
            System.out.println("Royal Flush!");
        } else if (straightFlush()) {
            playerBalance = playerBalance + (winningMultipliers[7] * playerBet);
            System.out.println("Straight Flush!");
        } else if (ofAKind(4)) {
            playerBalance = playerBalance + (winningMultipliers[6] * playerBet);
            System.out.println("Four of a kind!");
        } else if (fullHouse()) {
            playerBalance = playerBalance + (winningMultipliers[5] * playerBet);
            System.out.println("Full House!");
        } else if (flush()) {
            playerBalance = playerBalance + (winningMultipliers[4] * playerBet);
            System.out.println("Flush!");
        } else if (straight()) {
            playerBalance = playerBalance + (winningMultipliers[3] * playerBet);
            System.out.println("Straight!");
        } else if (ofAKind(3)) {
            playerBalance = playerBalance + (winningMultipliers[2] * playerBet);
            System.out.println("Three of a Kind!");
        } else if (twoPair()) {
            playerBalance = playerBalance + (winningMultipliers[1] * playerBet);
            System.out.println("Two Pair!");
        } else if (royalPair()) {
            playerBalance = playerBalance + (winningMultipliers[0] * playerBet);
            System.out.println("Royal Pair!");
        } else {
            System.out.println("Sorry, you lost!");
        }
    }

    /*************************************************
     *   add additional private methods here ....
     *
     *************************************************/

    private void getBet() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Place a bet: ");
        try {
            playerBet = scanner.nextInt();
            if (playerBet > playerBalance) {
                System.out.println("Your bet amount is higher than your balance amount.");
                System.out.println("Enter a new bet amount: ");
            }
        } catch (InputMismatchException e) {
            System.out.println("Input should be integers only. Try again.");
            getBet();
        }

    }

    private void showBalance() {
        System.out.println("Current Balance: $" + playerBalance);
    }

    private void exitGame() {
        showBalance();
        System.out.println("Bye!");
        System.exit(0);
    }

    private void playNewGame() throws PlayingCardException {
        System.out.println("Play again? (y or n): ");
        Scanner scanner = new Scanner(System.in);

        String input = scanner.nextLine();
        if (input.equals("y")) {
            seePayoutTable();
            play();
        } else if (input.equals("n")) {
            exitGame();
        } else {
            System.out.println("Enter 'y' or 'n': ");
            playNewGame();
        }
    }

    private void seePayoutTable() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Would you like to see payout table? (y or n)");
        String input = scanner.nextLine();

        if (input.equals("n")) {
            boolean showPayoutTable = false;
        } else if (input.equals('y')) {
            boolean showPayoutTable = true;
            showPayoutTable();
        }
    }

    private void deal() {
        try {
            playerHand = thisDeck.deal(numberCards);
        } catch(PlayingCardException e) {
            System.out.println("PlayingCardException: " + e.getMessage());
        }
    }

    private boolean royalFlush(){
        int firstCardSuit = playerHand.get(0).getSuit();
        List<Integer> royalFlushRankList = Arrays.asList(1,10,11,12,13); // A, 10, J, Q, K

        for(Card card : playerHand){
            if(card.getSuit() != firstCardSuit || !royalFlushRankList.contains(card.getRank()))
                return false;
        }
        return true;
    }

    private boolean straightFlush(){
        int firstCardSuit = playerHand.get(0).getSuit();
        List<Integer> sortedCardRanks = new ArrayList<>();

        for(Card card : playerHand){
            sortedCardRanks.add(card.getRank());
        }
        Collections.sort(sortedCardRanks);

        for(Card card : playerHand){
            if(card.getSuit() != firstCardSuit)
                return false;
        }

        for(int i = 0; i < 4; i++){
            if(!(sortedCardRanks.get(i) == (sortedCardRanks.get(i+1) - 1)))
                return false;
        }

        return true;
    }

    private boolean straight(){
        int firstCardSuit = playerHand.get(0).getSuit();
        List<Integer> sortedCardRanks = new ArrayList<>();
        List<Integer> cardSuits = new ArrayList<>();

        for(Card card : playerHand){
            sortedCardRanks.add(card.getRank());
            cardSuits.add(card.getSuit());
        }

        Collections.sort(sortedCardRanks);

        Set<Integer> suitSet = new HashSet<>(cardSuits);

        if(suitSet.size() > cardSuits.size())
            return false;

        for(int i = 0; i < 4; i++){
            if(!(sortedCardRanks.get(i) == (sortedCardRanks.get(i+1) - 1)))
                return false;
        }

        return true;
    }

    private boolean flush(){
        int firstCardSuit = playerHand.get(0).getSuit();
        for(Card card : playerHand){
            if(card.getSuit() != firstCardSuit)
                return false;
        }

        return true;
    }

    private boolean fullHouse(){
        HashMap<Integer,Integer> rankMap = new HashMap<>();

        for(Card card : playerHand){
            if(!rankMap.containsKey(card.getRank())){
                rankMap.put(card.getRank(), 1);
            }
            else{
                int value = rankMap.get(card.getRank());
                rankMap.put(card.getRank(), value+1);
            }
        }

        return rankMap.containsValue(3) && rankMap.containsValue(2);
    }

    private boolean ofAKind(int kindType){
        HashMap<Integer,Integer> rankMap = new HashMap<>();

        for(Card card : playerHand){
            if(!rankMap.containsKey(card.getRank())){
                rankMap.put(card.getRank(), 1);
            }
            else{
                int value = rankMap.get(card.getRank());
                rankMap.put(card.getRank(), value+1);
            }
        }

        return rankMap.containsValue(kindType);
    }

    private boolean twoPair(){
        HashMap<Integer,Integer> rankMap = new HashMap<>();
        int pairCounter = 0;

        for(Card card : playerHand){
            if(!rankMap.containsKey(card.getRank())){
                rankMap.put(card.getRank(), 1);
            }
            else{
                int value = rankMap.get(card.getRank());
                rankMap.put(card.getRank(), value+1);
                pairCounter++;
            }
        }

        return pairCounter == 2 && rankMap.containsValue(1);
    }

    private boolean royalPair(){
        HashMap<Integer,Integer> rankMap = new HashMap<>();
        int pairCounter = 0;

        for(Card card : playerHand){
            if(!rankMap.containsKey(card.getRank())){
                rankMap.put(card.getRank(), 1);
                pairCounter = 1;
            }
            else{
                int value = rankMap.get(card.getRank());
                rankMap.put(card.getRank(), value+1);
                pairCounter++;
            }
        }

        return pairCounter == 2 && rankMap.containsValue(1);
    }


    public void play() throws PlayingCardException {
        /** The main algorithm for single player poker game
         *
         * Steps:
         * 		showPayoutTable()
         *
         * 		++
         * 		show balance, get bet
         *		verify bet value, update balance
         *		reset deck, shuffle deck,
         *		deal cards and display cards
         *		ask for positions of cards to keep
         *          get positions in one input line
         *		update cards
         *		check hands, display proper messages
         *		update balance if there is a payout
         *		if balance = O:
         *			end of program
         *		else
         *			ask if the player wants to play a new game
         *			if the answer is "no" : end of program
         *			else : showPayoutTable() if user wants to see it
         *			goto ++
         */

        // implement this method

        // show balance.
        showBalance();

        // get bet + verify bet value.
        getBet();

        // update balance.
        playerBalance = playerBalance - playerBet;
        showBalance();

        // reset deck.
        thisDeck.reset();

        // shuffle deck.
        thisDeck.shuffle();

        // deal cards.
        deal();

        // display cards.
        System.out.println(playerHand.toString());

        // ask for positions of cards to keep. (get positions in one input line)
        System.out.print("Enter the positions of the cards you want to change (e.g. 1 4 5 ): ");

        Scanner scanner = new Scanner(System.in);
        String cardsToKeep = scanner.nextLine().trim().replaceAll("\\s", "");
        int keptCards = cardsToKeep.length();

        if (cardsToKeep.isEmpty()) {
            return;
        }

        // update cards.
        for (int k = 0; k < keptCards; k++) {
            playerHand.remove(Integer.parseInt(String.valueOf(cardsToKeep.charAt(cardsToKeep.length()-1)))-1);
            playerHand.addAll(thisDeck.deal(1));
            cardsToKeep = cardsToKeep.substring(0, cardsToKeep.length()-1);

            try {
                thisDeck.deal(keptCards);
            } catch (PlayingCardException e){
                System.out.println(e.getMessage());
            }
        }
        System.out.println(playerHand.toString());

        // check hands + display proper messages.
        checkHands();

        // update balance (if there is a payout.)
        showBalance();
        if (playerBalance == 0) {
            exitGame();
        } else {
            playNewGame();
        }
    }
