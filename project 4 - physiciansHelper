// This program does the following:
// 1) Read in a text file. ( up to 3 )
// 2) Prompt the user to enter one or more symptoms.
// 3) Display all illnesses, from all 3 files, that share the symptom(s).
// My contribution --> lines 45 - 161

public class PhysiciansHelper {

	// symptom to illnesses map
	private Map<String, List<String>> symptomChecker;

	/* Constructor symptomChecker map using TreeMap */
	public PhysiciansHelper() {
		// use TreeMap, i.e. sorted order keys
		symptomChecker = new TreeMap<String, List<String>>();

	} // end default constructor

	/*
	 * Reads a text file of illnesses and their symptoms.
	 * Each line in the file has the form
	 * Illness: Symptom, Symptom, Symptom, ...
	 * Store data into symptomChecker map
	 */
	public void processDatafile() throws FileNotFoundException {

		// Step 1: read in a data filename from keyboard
		Scanner input = new Scanner(System.in); // creates a scanner for data filename input
		System.out.println("enter a data filename: ");
		String fileName = input.nextLine(); // saves data filename input
		// create a scanner for the file
		Scanner file = new Scanner(new File(fileName));

		// Step 2: process data lines in file scanner
		// 2.1 for each line, split the line into a disease and symptoms
		// make sure to trim() spaces and use toLowercase()
		// 2.2 for symptoms, split into individual symptom
		// create a scanner for symptoms
		// useDelimiter(",") to split into individual symptoms
		// make sure to trim() spaces and use toLowercase()
		// for each symptom
		// if it is already in the map, insert disease into related list
		// if it is not already in the map, create a new list with the disease
--------------------------------------------------------------------------------------------------------
		while (file.hasNextLine()) { // loops through input
			String thisInput = file.nextLine().trim().toLowerCase(); // makes every character lowercase

			if (!thisInput.isEmpty()) {
				Scanner punct = new Scanner(thisInput); // gives me access to the colon and comma characters
				punct.useDelimiter(":");
				String disease = punct.next().trim(); // place a colon after the disease name

				punct.useDelimiter(",");
				while (punct.hasNext()) {
					String symptom = punct.next().replaceAll("[^A-Za-z ]", "").trim(); // place a comma after each symptom name

					// create a new array/list for the inputted symptom(s)
					if (!symptomChecker.containsKey(symptom)) {
						symptomChecker.put(symptom, new ArrayList<>());
					}
					symptomChecker.get(symptom).add(disease.trim());
				}
			}
		}

		// Step 3: display symptomChecker map
		for (String symptom: symptomChecker.keySet()) {
			System.out.println(symptom + " = " + Arrays.toString(symptomChecker.get(symptom).toArray()));
		}
	} // end processDatafile
--------------------------------------------------------------------------------------------------------
	/* Read patient's symptoms in a line and adds them to the list.
	 * Input format: Symptom, Symptom, Symptom,...
	 * Shows diseases that match a given number of the symptoms. */

	public void processSymptoms()   {

		// Step 1: get all possible symptoms from symptomChecker map and display them
		System.out.println("----------------------------------------------------------");
		System.out.println("possible symptoms:");
		for (String symptom: symptomChecker.keySet()) {
			System.out.println(symptom);
		}

		// Step 2: process patient symptoms, add to patientSymptoms list
		// read patient's symptoms in a line, separated by ','
		// create a scanner for symptoms
		// UseDelimiter(",") to split into individual symptoms
		// make sure to trim() spaces and use toLowercase()
		// display invalid/duplicate symptoms
		// add valid symptoms to patientSymptoms list

		System.out.println("-------------------------------------------------");
		ArrayList<String> patientSymptoms = new ArrayList<>();
		Scanner input2 = new Scanner(System.in); // creates a scanner for input(s) of symptom(s)
		System.out.println("enter symptom(s): ");
		String userSymptoms = input2.nextLine(); // saves input(s)
		Scanner punct2 = new Scanner(userSymptoms.toLowerCase()); // gives me access to the comma character
		punct2.useDelimiter(",");

		while (punct2.hasNext()) {
			String sym = punct2.next().trim(); // trims the spaces in the input
			if (!symptomChecker.keySet().contains(sym)) {
				System.out.println("an invalid symptom: " + sym); // if input is not part of map
			} else if (patientSymptoms.contains(sym)) {
				System.out.println("a duplicate symptom: " + sym); // if input pairs with 2+ mappings
			} else {
				patientSymptoms.add(sym);
			}
		}

		// Step 3: display patientSymptoms list
--------------------------------------------------------------------------------------------------------
		System.out.println("--------------------------------------------------------");
		System.out.println("list of symptoms: " + Arrays.toString(patientSymptoms.toArray()));

		// Step 4: process illnesses to frequency count
		// create a map of disease name and frequency count
		// for each symptom in patientSymptoms list
		// get list of illnesses from symptomChecker map
		// for each illness in the list
		// if it is already in the map, increase counter by 1
		// if it is not already in the map, create a new counter 1
		// ** need to keep track of maximum counter numbers

		int count = 0;
		HashMap<String, Integer> illnessFrequency = new HashMap<>();
		for (String sym: patientSymptoms) { // loops through symptom(s)
			for (String disease: symptomChecker.get(sym)) { // loops through disease that contains the symptom(s)
				if (!illnessFrequency.containsKey(disease)) {
					illnessFrequency.put(disease, 0); // if no occurrences, make it 0
				}
				illnessFrequency.put(disease, illnessFrequency.get(disease) + 1); // otherwise, increment by 1

				if (count < illnessFrequency.get(disease)) {
					count = illnessFrequency.get(disease); // gets total count of matchings
				}
			}
		}

		// Step 5: display result
		// for count i = 1 to maximum counter number
		// display illness that has count 'i'

		System.out.println("possible illnesses that match the symptom(s): ");
		for (int i = 1; i <= count; i++) {
			System.out.println("disease(s) match " + i + " symptom(s): ");
			for (String dis: illnessFrequency.keySet()) {
				if (illnessFrequency.get(dis) == i) { // prints the diseases associated with the inputted symptom(s)
					System.out.println(dis);
				}
			}
		}
	} // end processSymptoms

	public static void main(String[] args) throws FileNotFoundException {
		PhysiciansHelper lookup = new PhysiciansHelper();
		lookup.processDatafile();
		lookup.processSymptoms();
	} // end main
} // end PhysiciansHelper
