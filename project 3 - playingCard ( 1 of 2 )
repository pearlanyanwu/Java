// My contribution -> lines 12 - 86

class OneDeck {
    --------------------------------------------------------------------------------------------------------
    /**
     * Constructor: Creates default one deck of 52 playing cards in saveDeck and
     * 		    copy them to playDeck.
     * Note: You need to catch PlayingCardException from Card constructor
     *	     Use ArrayList for both saveDeck & playDeck
     */
     
    public OneDeck()
    {
        // implement this method!
        saveDeck = new ArrayList<Card>();
        playDeck = new ArrayList<>();

        for (int numDecks = 0; numDecks < 1; numDecks++) { // since we always have 1 deck
            for (int Csuit = 1; Csuit <= 4; Csuit++) { // for the suits: spades, diamonds, aces, hearts
                for (int Crank = 1; Crank <= 13; Crank++) { // for the ranks: A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K
                    try {
                        saveDeck.add(new Card(Crank, Csuit));
                    } catch (PlayingCardException e) {
                        System.out.println("PlayingCardException:" + e.getMessage());
                    }
                }
            }
        }
        playDeck.addAll(saveDeck);
    }
--------------------------------------------------------------------------------------------------------
    /**
     * Task: Shuffles cards in playDeck.
     * Hint: Look at java.util.Collections
     */
     
    public void shuffle()
    {
        // implement this method!
        Collections.shuffle(playDeck);
    }
--------------------------------------------------------------------------------------------------------
    /**
     * Task: Deals cards from the playDeck.
     *
     * @param numberCards number of cards to deal
     * @return a list containing cards that were dealt
     * @throw PlayingCardException if numberCard > number of remaining cards
     *
     * Note: You need to create ArrayList to stored dealt cards
     *       and should removed dealt cards from playDeck
     *
     */
     
    public List<Card> deal(int numberCards) throws PlayingCardException
    {
        // implement this method!
        List<Card> dealCard = new ArrayList<Card>();
        if (numberCards > playDeck.size()) {
            throw new PlayingCardException("There aren't enough cards here.");
        }
        for (int d = 0; d < numberCards; d++) {
            dealCard.add(playDeck.remove(0));
        }
        return dealCard;
    }
--------------------------------------------------------------------------------------------------------
    /**
     * Task: Resets playDeck by getting all cards from the saveDeck.
     */
     
    public void reset()
    {
        // implement this method!
        playDeck.clear();
        playDeck.addAll(saveDeck);
    }
--------------------------------------------------------------------------------------------------------
    /**
     * Task: Return number of remaining cards in playDeck.
     */
     
    public int remainSize()
    {
        return playDeck.size();
    }
--------------------------------------------------------------------------------------------------------
    /**
     * Task: Returns a string representing cards in the playDeck
     */
     
    public String toString()
    {
        return ""+playDeck;
    }
